-- Create book_chats table for storing chat conversations per book per user
CREATE TABLE IF NOT EXISTS "public"."book_chats" (
    "id" bigint NOT NULL,
    "book_id" integer NOT NULL,
    "user_id" uuid NOT NULL,
    "messages" jsonb DEFAULT '[]'::jsonb,
    "created_at" timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);

-- Add primary key
ALTER TABLE "public"."book_chats" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."book_chats_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Add primary key constraint
ALTER TABLE ONLY "public"."book_chats"
    ADD CONSTRAINT "book_chats_pkey" PRIMARY KEY ("id");

-- Add unique constraint to ensure one chat per book per user
ALTER TABLE ONLY "public"."book_chats"
    ADD CONSTRAINT "book_chats_book_user_unique" UNIQUE ("book_id", "user_id");

-- Add foreign key constraints
ALTER TABLE ONLY "public"."book_chats"
    ADD CONSTRAINT "book_chats_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "public"."books"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."book_chats"
    ADD CONSTRAINT "book_chats_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

-- Add indexes for performance
CREATE INDEX "idx_book_chats_book_id" ON "public"."book_chats" USING "btree" ("book_id");
CREATE INDEX "idx_book_chats_user_id" ON "public"."book_chats" USING "btree" ("user_id");
CREATE INDEX "idx_book_chats_updated_at" ON "public"."book_chats" USING "btree" ("updated_at");

-- Add trigger for updated_at
CREATE OR REPLACE TRIGGER "update_book_chats_modtime" 
    BEFORE UPDATE ON "public"."book_chats" 
    FOR EACH ROW 
    EXECUTE FUNCTION "public"."update_modified_column"();

-- Enable RLS
ALTER TABLE "public"."book_chats" ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Users can only access their own chats
CREATE POLICY "book_chats_select_policy" ON "public"."book_chats" 
    FOR SELECT TO "authenticated" 
    USING (("user_id" = "auth"."uid"()));

CREATE POLICY "book_chats_insert_policy" ON "public"."book_chats" 
    FOR INSERT TO "authenticated" 
    WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "book_chats_update_policy" ON "public"."book_chats" 
    FOR UPDATE TO "authenticated" 
    USING (("user_id" = "auth"."uid"())) 
    WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "book_chats_delete_policy" ON "public"."book_chats" 
    FOR DELETE TO "authenticated" 
    USING (("user_id" = "auth"."uid"()));

-- Grant permissions
GRANT ALL ON TABLE "public"."book_chats" TO "anon";
GRANT ALL ON TABLE "public"."book_chats" TO "authenticated";
GRANT ALL ON TABLE "public"."book_chats" TO "service_role";

GRANT ALL ON SEQUENCE "public"."book_chats_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."book_chats_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."book_chats_id_seq" TO "service_role";

